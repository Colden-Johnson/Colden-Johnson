# Hangman with GUI built using Tkinter, and singleplayer/multiplayer features

import requests
import random
import os

word_site = "https://www.mit.edu/~ecprice/wordlist.10000"
response = requests.get(word_site)
WORDS = response.content.decode('utf-8').splitlines()
global failed_guesses
failed_guesses = 0
global end_condition
end_condition = False
global player_input
global word
global guessed_letters
guessed_letters = []

# Tkinter related global imports
from tkinter import *

root = Tk()
root.title('Hangman - Canvas')
root.geometry('500x720')
global text2

# User input text box
# need to change where this is placed
my_text = Text(root, width=40, height=1)
my_text.grid(row=3, column=0, pady=10)


def clear():
    my_text.delete(1.0, END)


def get_text():
    global player_input
    player_input = my_text.get("1.0", END)
    player_input = player_input.strip()
    var.set(1)


# Create clear entry/input buttons
button_frame = Frame(root)
# if I want to shift this over, put something invisible in column 1 with high padx, then shift other stuff to column 1
button_frame.grid(row=5, column=0,)
clear_button = Button(button_frame, text='Clear Entry', command=clear)
clear_button.grid(row=5, column=1)
get_text_button = Button(button_frame, text='Input', command=get_text)
get_text_button.grid(row=5, column=3, padx=20, pady=10)
# variable for input text


def print_to_screen_a(stra):
    global text2
    text2 = Label(root, text=stra)
    text2.grid(row=7, column=0)


def print_to_screen_b(stra):
    global text2
    text2 = Label(root, text=stra)
    text2.grid(row=8, column=0)


def print_to_screen_c(stra):
    global text2
    text2 = Label(root, text=stra)
    text2.grid(row=9, column=0)


def clear_text_display():
    print_to_screen_a('                                                                 ')
    print_to_screen_b('                                                                 ')
    print_to_screen_c('                                                                 ')
    print_to_screen_d('                                                                                                    ')
    print_to_screen_e('                                                                                                                 ')

def print_to_screen_d(stra):
    global text2
    text2 = Label(root, text=stra)
    text2.grid(row=10, column=0)


def print_to_screen_e(stra):
    global text2
    text2 = Label(root, text=stra)
    text2.grid(row=11, column=0)


my_canvas = Canvas(root, width=500, height=500, bg='white')
my_canvas.grid(row=25, column=0, pady=25)


def list_guessed_letters(letter):
    global guessed_letters
    guessed_letters.append(letter)
    # convert to dictionary to remove duplicates, convert back to list
    guessed_letters.sort()
    guessed_letters = list(dict.fromkeys(guessed_letters))
    print_to_screen_e("Guessed letters: " + str(guessed_letters))


def play_game_gui():
    global end_condition
    global failed_guesses
    global player_input
    player_input = ''
    main_program_loop = True
    while main_program_loop:
        print_to_screen_a("Are you playing by yourself (yes/no)")
        get_text_button.wait_variable(var)
        while player_input != '':
            if player_input == 'yes':
                print_to_screen_a("I will choose a word for you to guess!")
                listselect = random.randint(1, 10000)
                global word
                word = WORDS[listselect]
                word = word.upper()
                player_input = ''
                break
            elif player_input == 'no':
                clear_text_display()
                print_to_screen_a("Choose a word to guess!")
                get_text_button.wait_variable(var)
                word = player_input.upper()
                print_to_screen_b('your word is ' + word)
                player_input = ''
                break
            else:
                print_to_screen_a("Invalid input. Try again.")
        global list_of_letters
        list_of_letters = list(word)
        global guessing_list
        guessing_list = []
        for i in range(len(word)):
            guessing_list.append("_")

        while not end_condition:
            make_guess()
            print_to_screen_d("             " + str(guessing_list) + "               ")
            draw_hangman()
            check_win()
        while True:
            get_text_button.wait_variable(var)
            print_to_screen_c("Would you like to play again? (yes/no)")
            if player_input == "yes":
                list_of_letters = ''
                guessing_list = ''
                failed_guesses = 0
                end_condition = False
                clear_text_display()
                break
            elif player_input == "no":
                clear_text_display()
                print_to_screen_a('                 Game over.                  ')
                quit()
            else:
                print_to_screen_a('                                 Invalid input.                                ')
                continue


def check_win():
    global end_condition
    if list_of_letters == guessing_list:
        end_condition = True
        clear_text_display()
        print_to_screen_a("You didn't hang!")
        print_to_screen_b("Would you like to play again? (yes/no)")


def make_guess():
    correct_guess = False
    print_to_screen_b("What letter do you guess?")
    get_text_button.wait_variable(var)
    guess = player_input
    guess = guess.upper()
    list_guessed_letters(guess)
    for x in range(len(list_of_letters)):
        if guess == list_of_letters[x]:
            guessing_list[x] = guess
            correct_guess = True
            print_to_screen_c("             " + guess + " is a correct guess!               ")
    if not correct_guess:
        print_to_screen_c("             " + guess + " is an incorrect guess.                ")
        global failed_guesses
        failed_guesses = failed_guesses + 1


def draw_hangman():
    global end_condition
    global word
    my_canvas.create_line(100, 500, 100, 150, fill="black")
    my_canvas.create_line(100, 150, 300, 150, fill="black")
    my_canvas.create_line(300, 150, 300, 200, fill="black")

    if failed_guesses > 0:
        my_canvas.create_oval(275, 200, 325, 250, fill='tan')
    if failed_guesses > 1:
        my_canvas.create_line(300, 250, 300, 350, fill='black')
    if failed_guesses > 2:
        my_canvas.create_line(300, 300, 250, 250, fill='black')
    if failed_guesses > 3:
        my_canvas.create_line(300, 300, 350, 250, fill='black')
    if failed_guesses > 4:
        my_canvas.create_line(300, 350, 325, 400, fill='black')
    if failed_guesses > 5:
        my_canvas.create_line(300, 350, 275, 400, fill='black')
    if failed_guesses > 6:
        my_canvas.create_line(275, 400, 260, 400, fill='black')
    if failed_guesses > 6:
        my_canvas.create_line(325, 400, 340, 400, fill='black')
        end_condition = True
        clear_text_display()
        print_to_screen_a("You hung :(")
        print_to_screen_b("The correct word was " + word)
        print_to_screen_c("Would you like to play again? (yes/no)")


var = IntVar()
draw_hangman()
play_game_gui()


root.mainloop()
